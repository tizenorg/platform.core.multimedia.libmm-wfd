/*
 * libmm-wfd
 *
 * Copyright (c) 2011 - 2013 Samsung Electronics Co., Ltd. All rights reserved.
 *
 * Contact: JongHyuk Choi <jhchoi.choi@samsung.com>, ByungWook Jang <bw.jang@samsung.com>,
 * Manoj Kumar K <manojkumar.k@samsung.com>, Hyunil Park <hyunil46.park@samsung.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static
#ifdef G_HAVE_INLINE
inline
#endif
void
_dbus_glib_async_data_free (gpointer stuff)
{
  g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_com_samsung_wfd_server
#define DBUS_GLIB_CLIENT_WRAPPERS_com_samsung_wfd_server

static
#ifdef G_HAVE_INLINE
inline
#endif
gboolean
com_samsung_wfd_server_test_method (DBusGProxy *proxy, const gint IN_pid, const char * IN_test_name, gint* OUT_return_code, GError **error)

{
  return dbus_g_proxy_call (proxy, "test_method", error, G_TYPE_INT, IN_pid, G_TYPE_STRING, IN_test_name, G_TYPE_INVALID, G_TYPE_INT, OUT_return_code, G_TYPE_INVALID);
}

typedef void (*com_samsung_wfd_server_test_method_reply) (DBusGProxy *proxy, gint OUT_return_code, GError *error, gpointer userdata);

static void
com_samsung_wfd_server_test_method_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  gint OUT_return_code;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INT, &OUT_return_code, G_TYPE_INVALID);
  (*(com_samsung_wfd_server_test_method_reply)data->cb) (proxy, OUT_return_code, error, data->userdata);
  return;
}

static
#ifdef G_HAVE_INLINE
inline
#endif
DBusGProxyCall*
com_samsung_wfd_server_test_method_async (DBusGProxy *proxy, const gint IN_pid, const char * IN_test_name, com_samsung_wfd_server_test_method_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "test_method", com_samsung_wfd_server_test_method_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INT, IN_pid, G_TYPE_STRING, IN_test_name, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_com_samsung_wfd_server */

G_END_DECLS
